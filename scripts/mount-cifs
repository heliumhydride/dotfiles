#!/bin/bash

# can be used from the command-line like:
#   $ SHARE=//x.x.x.x/myshare mount-cifs
# or more interactively with dmenu (https://tools.suckless.org/dmenu/)
#   just run mount-cifs with no SHARE arg
# other environment vars:
#   ROOT_AGENT = specify program to get root permissions (eg. doas, pkexec) (default: sudo/st -e sudo depending on mode)
#   DEBUG = be more verbose when set to 1 (useful for fixing stuff)

error() {
  printf "\033[1;31merror -> %s\033[0m\n" "$1"
  exit 1
}

warn() {
  printf "\033[1;33mwarn -> %s\033[0m\n" "$1"
}

info() {
  printf "\033[1;34m%s\033[0m\n" "$1"
}

success() {
  printf "\033[1;32m%s\033[0m\n" "$1"
}

ask() {
  # $1 is prompt text
  # $2 is variable name (without '$' sign)
  if [ "$_dmenu_interactive" = 1 ]; then
    eval "$2"=\"$(echo '' | dmenu -p "$1")\"
  else
    printf "%s: " "$1"
    #this is better
    read -r "$2"
  fi
}

[ -z "$SHARE" ] && {
        _dmenu_interactive=1
        ask 'Share location (empty=exit)' SHARE
}
[ -z "$SHARE" ] && [ "$_dmenu_interactive" = 1 ] && exit 0

ask 'Connect as user (empty=guest w/ no password)' USER
[ -z "$USER" ] || ask 'With password (empty=no password)' PASSWORD
ask 'Mount with UID (empty=1000)' MNT_UID
ask 'Mount with GID (empty=1000)' MNT_GID

[ -z "$ROOT_AGENT" ] && {
  if [ "$_dmenu_interactive" ]; then
    ROOT_AGENT="st -e sudo"
  else
    ROOT_AGENT="sudo"
  fi
}

# this ugly mess extracts the ip and the share name from the share path by cutting characters here and there (which requires cut command from coreutils/busybox)
# _share_ip="$(echo "$SHARE" | cut -c3- | cut -f1 -d/)"
# _share_name="$(echo "$SHARE" | cut -c3- | cut -f2 -d/)"
_share_ip_name="$(echo "$SHARE" | cut -c3- | sed 's/\//_/g')"
# _share_mountpoint="/tmp/cifs-${_share_ip}_${_share_name}"
_share_mountpoint="/tmp/cifs-${_share_ip_name}"

_user_opt="username=$USER"
_passwd_opt="password=$PASSWORD"

if [ -z "$MNT_UID" ]; then 
  _uid_opt="uid=1000"
else
  _uid_opt="uid=${MNT_UID}"
fi

if [ -z "$MNT_GID" ]; then
  _gid_opt="gid=1000"
else
  _gid_opt="gid=${MNT_GID}"
fi

# check wether we add any mount options
[ -z "$USER" ] || [ -z "$PASSWORD" ] || [ -z "$MNT_UID" ] || [ -z "$GID" ] || _mount_opts="defaults"
_mount_opts="${_user_opt},${_passwd_opt},${_uid_opt},${_gid_opt}"

[ "$DEBUG" = 1 ] && {
  info "share         $SHARE"
  info "login         $USER $PASSWORD"
  info "mount uid/gid $MNT_UID/$MNT_GID"
  info "mountpoint    $_share_mountpoint"
  info "mount options $_mount_opts"
}

mkdir "$_share_mountpoint" || warn "creating share mountpoint $_share_mountpoint failed, already exists? (exit:$?)"
# variables here intentionally split
$ROOT_AGENT mount -t cifs "$SHARE" "${_share_mountpoint}" -o "$_mount_opts" || error "mounting $SHARE to $_share_mountpoint failed (exit:$?)"

success "$SHARE successfully mounted on $_share_mountpoint"
